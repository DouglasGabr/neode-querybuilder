import WhereStatement from './where-statement';
import { StatementPrefix, Operator, Prefix, Order, Direction } from '../constants';
import OrderBy from './order-by';
import Property from '../property';
export default class Statement<T> {
    private prefix;
    private deleteValues;
    private detachDeleteValues;
    private removeValues;
    private onCreateSetValues;
    private onMatchSetValues;
    private setValues;
    private returnValues;
    private yieldValues;
    private pattern;
    predicates: Array<WhereStatement>;
    order: OrderBy[];
    private skipRows?;
    private limitRows?;
    constructor(prefix: StatementPrefix);
    lastPredicate(): WhereStatement;
    call(fn: string, ...parameters: any[]): this;
    yield(...items: string[]): Statement<T>;
    with(items: string[]): Statement<T>;
    match(alias: string | undefined, labels: any, properties: any): Statement<T>;
    relationship(type: string | string[], direction?: Direction, alias?: string | null, properties?: Property[], degrees?: number | string): Statement<T>;
    where(alias: WhereStatement | string, param?: string, operator?: Operator, prefix?: Prefix, negative?: boolean): Statement<T>;
    delete(...values: string[]): Statement<T>;
    remove(...values: string[]): Statement<T>;
    onCreateSet(key: string, param: string): Statement<T>;
    onMatchSet(key: string, param: string): Statement<T>;
    set(key: string, param: string): Statement<T>;
    setAppend(key: string, param: string): Statement<T>;
    detachDelete(...values: string[]): Statement<T>;
    whereNot(alias: string, param: string, prefix?: Prefix): Statement<T>;
    whereId(alias: string, param: string, prefix?: Prefix): Statement<T>;
    whereNotId(alias: string, param: string, prefix?: Prefix): Statement<T>;
    whereRaw(predicate: string, prefix?: Prefix): Statement<T>;
    whereBetween(key: string, floor: string, ceiling: string): Statement<T>;
    whereLike(key: string, param: string): Statement<T>;
    whereNotLike(key: string, param: string): Statement<T>;
    whereStartsWith(key: string, param: string): Statement<T>;
    whereNotStartsWith(key: string, param: string): Statement<T>;
    whereEndsWith(key: string, param: string): Statement<T>;
    whereNotEndsWith(key: string, param: string): Statement<T>;
    whereContains(key: string, param: string): Statement<T>;
    whereNotContains(key: string, param: string): Statement<T>;
    whereGreaterThan(key: string, param: string): Statement<T>;
    whereGreaterThanOrEqual(key: string, param: string): Statement<T>;
    whereLessThan(key: string, param: string): Statement<T>;
    whereLessThanOrEqual(key: string, param: string): Statement<T>;
    orderBy(key: string, order?: Order): Statement<T>;
    return(...values: string[]): Statement<T>;
    skip(amount: number): void;
    limit(amount: number): void;
    toString(): string;
}
